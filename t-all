#!/usr/bin/env bash

# Copyright 2017-2019 Raytheon BBN Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A script to try all of the ciphersuites supported by $SSL
# for a given $SERVER and $SNI pair, to see which are supported.
# This opens many connections to the $SERVER, so it should be done
# slowly, in a way that doesn't abuse the server.

SERVER=$1
SNI=$2

if [ -z ${SSL+x} ]; then
    echo "ERROR: SSL is not set"
    exit 1
fi

DELAY=1
ciphers=$($SSL ciphers 'ALL:eNULL' | sed -e 's/:/ /g')

echo Obtaining cipher list from $($SSL version).
echo $ciphers

for cipher in ${ciphers[@]}; do
    echo $cipher

    # openssl uses a different commandline flag for
    # TLS 1.3 ciphersuites than non-1.3 ciphersuites,
    # so the flag itself is a parameter.
    #
    # Fortunately, all the TLS 1.3 ciphersuites have
    # names that start with "TLS_", and all the other
    # ciphersuites do not.  This will probably break
    # when 1.4 appears.
    #
    case $cipher in;
	TLS_*)
	    flag="-ciphersuites"
	    ;;
	*)
	    flag="-ciphers"
	    ;;
    esac

    echo -n Testing $cipher...
    result=$(echo -n | $SSL s_client "$flag" "$cipher" \
	    -servername $SNI -connect $SERVER:443 2>&1)
    if [[ "$result" =~ ":error:" ]] ; then
	error=$(echo -n $result | cut -d':' -f6)
	echo NO \($error\)
    else
	if [[ "$result" =~ "Cipher is ${cipher}" || "$result" =~ "Cipher    :" ]] ; then
	    echo YES
	else
	    echo UNKNOWN RESPONSE
	    echo $result
	fi
    fi
    sleep $DELAY
done
